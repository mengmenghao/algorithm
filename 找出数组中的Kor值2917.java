/**
 * @author lmh
 * @description:
 * 给你一个下标从 0 开始的整数数组 nums 和一个整数 k 。
 *
 * nums 中的 K-or 是一个满足以下条件的非负整数：
 *
 * 只有在 nums 中，至少存在 k 个元素的第 i 位值为 1 ，那么 K-or 中的第 i 位的值才是 1 。
 * 返回 nums 的 K-or 值。
 *
 * 注意 ：对于整数 x ，如果 (2i AND x) == 2i ，则 x 中的第 i 位值为 1 ，其中 AND 为按位与运算符。
 *
 *
 *
 * 示例 1：
 *
 * 输入：nums = [7,12,9,8,9,15], k = 4
 * 输出：9
 * 解释：nums[0]、nums[2]、nums[4] 和 nums[5] 的第 0 位的值为 1 。
 * nums[0] 和 nums[5] 的第 1 位的值为 1 。
 * nums[0]、nums[1] 和 nums[5] 的第 2 位的值为 1 。
 * nums[1]、nums[2]、nums[3]、nums[4] 和 nums[5] 的第 3 位的值为 1 。
 * 只有第 0 位和第 3 位满足数组中至少存在 k 个元素在对应位上的值为 1 。因此，答案为 2^0 + 2^3 = 9 。
 * 示例 2：
 *
 * 输入：nums = [2,12,1,11,4,5], k = 6
 * 输出：0
 * 解释：因为 k == 6 == nums.length ，所以数组的 6-or 等于其中所有元素按位与运算的结果。因此，答案为 2 AND 12 AND 1 AND 11 AND 4 AND 5 = 0 。
 * 示例 3：
 *
 * 输入：nums = [10,8,5,9,11,6,8], k = 1
 * 输出：15
 * 解释：因为 k == 1 ，数组的 1-or 等于其中所有元素按位或运算的结果。因此，答案为 10 OR 8 OR 5 OR 9 OR 11 OR 6 OR 8 = 15 。
 * @projectName: algorithm
 * @className: 找出数组中的Kor值2917
 * @createDate: 2024/3/6 21:28
 */
public class 找出数组中的Kor值2917 {
    public static void main(String[] args) {
        int[] nums = {7,12,9,8,9,15};
        System.out.println(findKOr(nums,4));
    }

    /**
     * 枚举每一个二进制位
     * 思路与算法
     *
     * 我们直接按照题目描述进行枚举即可。
     *
     * 具体地，我们在外层循环枚举 i，内层循环枚举数组 nums 中元素 nums[j]。我们可以通过：
     *
     * (nums[j] >> i) & 1}
     * 得到 nums[j] 的第 i 位。如果至少有 k 个 1，就将最终的答案加上 2^i
     *  ，位运算表示即为 1 << i
     *
     * 本题中数组 nums 中的元素不超过 2^31
     *  ，因此 i 的枚举范围是 [0,31)。
     *
     * @param nums
     * @param k
     * @return
     */
    public static int findKOr(int[] nums, int k) {
        int ans = 0;
        //
        for (int i = 0; i < 31; i++) {
            int cnt = 0;
            for (int num : nums) {
                //右移操作 (num >> i)：将数值 num 的二进制表示向右移动 i 位。这相当于将 num 除以 (2^i)（向下取整），对于无符号数或者正数来说高位被丢弃，而对于有符号数（负数）则根据实现不同可能用0填充或复制最高有效位（符号位）。
                //按位与操作 (& 1)：将上述右移结果与数值1进行按位与操作。由于1在二进制中只有一位是1（最低位），所以这个操作实际上是为了检查原数值 num 在经过右移 i 位之后，最右边的那一位置上的值是否为1。如果该位置为1，则结果为1；如果为0，则结果为0。
                //因此，(num >> i) & 1 这个表达式的目的是提取 num 右移 i 位后的最低位（第0位），返回一个布尔型的结果（0或1）。这在判断某个位是否为1，或者处理位级逻辑时非常有用。
                if (((num >> i) & 1) != 0) {
                    ++cnt;
                }
            }

            // 如果数组中有至少 k 个元素的第 i 位值为 1 ，那么 K-or 中的第 i 位的值应该是 1 。
            if (cnt >= k) {
                //位左移操作 (1 << i)：将数值1的二进制表示向左移动 i 位。这相当于将1乘以 (2^i)。例如，如果 i = 2，则结果是 100（即十进制中的4），因为1向左移动两位后变为 1 * 2^2。
                //按位或运算符 |=：这是一个复合赋值运算符，它会先计算右侧表达式的结果，然后将该结果与左侧变量 ans 进行按位或操作，并将最终结果赋值回 ans。按位或操作符 | 对于两个数的每一位，当且仅当两边对应的位至少有一个为1时，结果的这一位才为1；否则为0。
                //结合以上两点，ans |= (1 << i) 的含义是，在 ans 当前的二进制表示基础上，将第 i 位置为1，同时保留其他位不变。这个操作常用于设置一个整数中的特定位为1，而不会影响到其他已设置为1的位。
                ans |= (1 << i);
            }
        }
        return ans;
    }
}

